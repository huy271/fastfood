generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(uuid())
  fullName      String
  email         String          @unique
  phoneNumber   String?
  address       String?
  password      String
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orders        Order[]
  searchHistory SearchHistory[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean     @default(true)
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  totalAmount     Decimal     @db.Decimal(10, 2)
  status          String      @default("pending") // pending, processing, completed, cancelled
  paymentStatus   String      @default("pending") // pending, paid, failed
  paymentId       String?
  shippingAddress String?
  phoneNumber     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  payment         Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id              String   @id @default(uuid())
  orderId         String   @unique
  amount          Decimal  @db.Decimal(10, 2)
  paymentMethod   String
  stripePaymentId String?
  status          String // success, failed, pending
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String
  query     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
